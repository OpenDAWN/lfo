"use strict";

self.addEventListener("message", function (e) {
  process(e.data);
}, false);

function process(message) {

  var that = message.options;
  var hopSize = that.hopSize;
  var frameSize = that.frameSize;
  var blockSize = that.blockSize;
  var sampleRate = that.sampleRate;
  var buffer = message.data;
  var length = buffer.length;

  var block = new Float32Array(blockSize);

  for (var index = 0; index < length; index += blockSize) {
    var copySize = length - index;

    if (copySize > blockSize) copySize = blockSize;

    var bufferSegment = buffer.subarray(index, index + copySize);

    block.set(bufferSegment, 0);

    for (var i = copySize; i < blockSize; i++) block[i] = 0;

    postMessage({ block: block, time: index / sampleRate });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi9zb3VyY2VzL3Byb2Nlc3Mtd29ya2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFTLENBQUMsRUFBRTtBQUFFLFNBQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FBRSxFQUFFLEtBQUssQ0FBQyxDQUFDOztBQUUxRSxTQUFTLE9BQU8sQ0FBQyxPQUFPLEVBQUU7O0FBRXhCLE1BQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDM0IsTUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUMzQixNQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQy9CLE1BQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDL0IsTUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUNqQyxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQzFCLE1BQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7O0FBRTNCLE1BQUksS0FBSyxHQUFHLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUV4QyxPQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssSUFBSSxTQUFTLEVBQUU7QUFDdEQsUUFBSSxRQUFRLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQzs7QUFFOUIsUUFBRyxRQUFRLEdBQUcsU0FBUyxFQUNyQixRQUFRLEdBQUcsU0FBUyxDQUFDOztBQUV2QixRQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7O0FBRTdELFNBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QixTQUFJLElBQUksQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUN0QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUVmLGVBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssR0FBRyxVQUFVLEVBQUMsQ0FBQyxDQUFDO0dBQ3ZEO0NBQ0YiLCJmaWxlIjoiZXM2L3NvdXJjZXMvcHJvY2Vzcy13b3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbihlKSB7IHByb2Nlc3MoZS5kYXRhKTsgfSwgZmFsc2UpO1xuXG5mdW5jdGlvbiBwcm9jZXNzKG1lc3NhZ2UpIHtcblxuICB2YXIgdGhhdCA9IG1lc3NhZ2Uub3B0aW9ucztcbiAgdmFyIGhvcFNpemUgPSB0aGF0LmhvcFNpemU7XG4gIHZhciBmcmFtZVNpemUgPSB0aGF0LmZyYW1lU2l6ZTtcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoYXQuYmxvY2tTaXplO1xuICB2YXIgc2FtcGxlUmF0ZSA9IHRoYXQuc2FtcGxlUmF0ZTtcbiAgdmFyIGJ1ZmZlciA9IG1lc3NhZ2UuZGF0YTtcbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG5cbiAgdmFyIGJsb2NrID0gbmV3IEZsb2F0MzJBcnJheShibG9ja1NpemUpO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGJsb2NrU2l6ZSkge1xuICAgIHZhciBjb3B5U2l6ZSA9IGxlbmd0aCAtIGluZGV4O1xuXG4gICAgaWYoY29weVNpemUgPiBibG9ja1NpemUpXG4gICAgICBjb3B5U2l6ZSA9IGJsb2NrU2l6ZTtcblxuICAgIHZhciBidWZmZXJTZWdtZW50ID0gYnVmZmVyLnN1YmFycmF5KGluZGV4LCBpbmRleCArIGNvcHlTaXplKTtcblxuICAgIGJsb2NrLnNldChidWZmZXJTZWdtZW50LCAwKTtcblxuICAgIGZvcih2YXIgaSA9IGNvcHlTaXplOyBpIDwgYmxvY2tTaXplOyBpKyspXG4gICAgICBibG9ja1tpXSA9IDA7XG5cbiAgICBwb3N0TWVzc2FnZSh7YmxvY2s6IGJsb2NrLCB0aW1lOiBpbmRleCAvIHNhbXBsZVJhdGV9KTtcbiAgfVxufSJdfQ==